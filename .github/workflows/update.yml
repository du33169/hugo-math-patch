# This is a basic workflow to help you get started with Actions

name: Patch Hugo Release

permissions:
  contents: write # need for create release

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight (00:00) UTC every day

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  version-check:
    runs-on: ubuntu-latest
    steps:
    - name: hugo release
      id: hugo_release
      uses: pozetroninc/github-action-get-latest-release@master
      with: 
        repository: gohugoio/hugo
    # output: steps.hugo_release.outputs.release

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: release

    - name: update version
      id: update_version
      run: |
        cached_version=$(cat hugo_version.txt)
        if [ "$cached_version" == "${{ steps.hugo_release.outputs.release }}" ]; then
          echo "new_release=false" >> $GITHUB_OUTPUT
        else
          echo "new_release=true" >> $GITHUB_OUTPUT
          echo ${{ steps.hugo_release.outputs.release }} > hugo_version.txt
          echo "Updated hugo_version.txt cache with new version ${{ steps.hugo_release.outputs.release }}."

          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add hugo_version.txt
          git commit -m "${{ steps.hugo_release.outputs.release }}"
          git tag -a "${{ steps.hugo_release.outputs.release }}" -m "update hugo version to ${{ steps.hugo_release.outputs.release }}"
          git push origin "${{ steps.hugo_release.outputs.release }}"
        fi

    outputs:
      hugo_version: ${{ steps.hugo_release.outputs.release }}
      new_release: ${{ steps.update_version.outputs.new_release }}

  build:
    needs: version-check
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    if: needs.version-check.outputs.new_release == 'true' 
    #only build with new release
    steps:

    - name: Check out hugo src code
      uses: actions/checkout@v2
      with:
        repository: gohugoio/hugo
        ref: ${{ needs.version-check.outputs.hugo_version }}
    - name: Check out patch
      uses: actions/checkout@v2
      with:
        ref: main
        path: patch
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.20.x

    - name: Cache go dependencies
      id: cacher
      uses: actions/cache@v3
      with:
        path: |
          ~/go/
          ~/.cache/go-build
        key: ${{ runner.os }}-hugo-katex-go-depend

    - name: Install dependencies
      if: steps.cacher.outputs.cache-hit != 'true'
      run: |
        go install
        go install github.com/magefile/mage@latest


    # patch
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10' 
    - name: patch katex support
      run: python patch/patch_katex.py

    #build
    - name: Build project
      run: ~/go/bin/mage hugo
      env:
        HUGO_BUILD_TAGS: extended

    # - name: mage check
    #   run: ~/go/bin/mage -v check
    #   env:
    #     HUGO_BUILD_TAGS: extended

    #rename
    - name: rename release asset for Ubuntu/macos
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        mv hugo "hugo_katex_${{ runner.os }}_${{ needs.version-check.outputs.hugo_version }}"

    - name: rename release asset for Windows
      if: matrix.os == 'windows-latest'
      run: |
        ren hugo.exe "hugo_katex_${{ runner.os }}_${{ needs.version-check.outputs.hugo_version }}.exe"
        
    # upload release
    - name: Create and upload release for Ubuntu/macos
      if: (matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' )
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version-check.outputs.hugo_version }}
        files: "hugo_katex_${{ runner.os }}_${{ needs.version-check.outputs.hugo_version }}"

    - name: Create and upload release for Windows
      if: matrix.os == 'windows-latest'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.version-check.outputs.hugo_version }}
        files: "hugo_katex_${{ runner.os }}_${{ needs.version-check.outputs.hugo_version }}.exe"
